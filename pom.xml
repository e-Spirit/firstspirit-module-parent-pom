<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.espirit.ps.maven</groupId>
	<artifactId>firstspirit-module-parent-pom</artifactId>
	<version>1.0.0</version>
	<packaging>pom</packaging>
	
	<organization>
		<name>e-Spirit AG</name>
		<url>http://www.e-spirit.com/</url>
	</organization>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<artifactoryUrl>http://artifactory.e-spirit.de/artifactory</artifactoryUrl>
	</properties>

	<build>

		<!-- set resource for module.xml (parsing) -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/*.xml</exclude>
				</excludes>
			</resource>
		</resources>

		<plugins>
			<!-- set source and target compiler versions -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${maven-compiler.source-version}</source>
					<target>${maven-compiler.target-version}</target>
					<compilerArgument>-Xlint:all</compilerArgument>
					<showWarnings>false</showWarnings>
					<showDeprecation>true</showDeprecation>
				</configuration>

			</plugin>

			<!-- get web-resource and service filenames from maven dependencies using gmaven -->
			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<version>1.0</version>
				<executions>
					<execution>
						<id>get-resource-filenames</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>
                                <![CDATA[
                            // Duplicate model in a Mavenproject, allowing to get associated artifacts and filenames
                            // More info here : http://maven.apache.org/ref/3.0.3/maven-core/apidocs/org/apache/maven/project/MavenProject.html
                            def mavenProject = new org.apache.maven.project.MavenProject(project)
                            def dependencies = mavenProject.getArtifacts() // gets also transitive ones
                            def artifacts = ""
                            def artifactsRuntime = ""

                            dependencies.each {
                                // More infos on Dependency there : http://maven.apache.org/ref/3.0.3/maven-model/apidocs/org/apache/maven/model/Dependency.html

                                // dependencies for service
                                if ( it.getScope().equals("compile")) {
                                    // More infos on Artifact there : http://maven.apache.org/ref/3.0.3/maven-artifact/apidocs/org/apache/maven/artifact/Artifact.html
                                    def artifact = mavenProject.getArtifacts().find { artifact -> artifact.getArtifactId()==it.getArtifactId() }
                                    artifacts = artifacts + "<resource scope=\"module\">lib/" + artifact.getFile().getName() + "</resource>\n"
                                }

                                // dependencies for webapplication
                                if ( it.getScope().equals("runtime")) {
                                    // More infos on Artifact there : http://maven.apache.org/ref/3.0.3/maven-artifact/apidocs/org/apache/maven/artifact/Artifact.html
                                    def artifact = mavenProject.getArtifacts().find { artifact -> artifact.getArtifactId()==it.getArtifactId() }
                                    artifactsRuntime = artifactsRuntime + "<resource>lib/" + artifact.getFile().getName() + "</resource>\n"
                                }
                            }
                            // Write resources to a maven property
                            project.properties['resources'] = artifacts
                            project.properties['resourcesRuntime'] = artifactsRuntime

                            println "service-resources can be found at "+project.properties['resources']
                            println "webapp-resources can be found at "+project.properties['resourcesRuntime']
                            ]]>
							</source>
						</configuration>
					</execution>
				</executions>
			</plugin>



			<!-- Enabled for unit tests -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.9</version>
			</plugin>

			<!-- Integration tests - skipped here, so that they can be enabled using a profile -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.9</version>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
					<execution>
						<id>verify</id>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!-- create jar -->
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
				<executions>
					<execution>
						<id>default-jar</id>
						<phase>process-classes</phase>
						<configuration>
							<excludes>
								<exclude>**/*.jar</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- copy dependencies, but exclude test and provided scopes -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/dependencies/</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<excludeTransitive>false</excludeTransitive>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- create fsm -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<dependencies>
					<dependency>
						<groupId>com.espirit.ps.maven</groupId>
						<artifactId>fsm-assembly</artifactId>
						<version>1.0.0</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>jar-with-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<archiverConfig>
							</archiverConfig>
						</configuration>
					</execution>
					<execution>
						<id>fsm-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptorRefs>
								<descriptorRef>fsm-assembly</descriptorRef>
							</descriptorRefs>
							<appendAssemblyId>true</appendAssemblyId>
							<finalName>${project.artifactId}-${project.version}</finalName>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.4</version>
				<executions>
					<execution>
						<id>rename</id>
						<phase>package</phase>
						<configuration>
							<tasks>
								<property name="compile_classpath" refid="maven.compile.classpath" />
								<property name="runtime_classpath" refid="maven.runtime.classpath" />
								<property name="test_classpath" refid="maven.test.classpath" />
								<property name="plugin_classpath" refid="maven.plugin.classpath" />
								<move file="target/${project.artifactId}-${project.version}-fsm.zip" tofile="target/${project.artifactId}-${project.version}.fsm" />
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- attach fsm artifact -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<configuration>
					<artifacts>
						<artifact>
							<file>target/${project.artifactId}-${project.version}.fsm</file>
							<type>fsm</type>
						</artifact>
					</artifacts>
					<name />
					<regex />
					<replacement />
					<value />
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- deploy artifact to repository -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.7</version>
				<configuration>

				</configuration>
				<executions>
					<execution>
						<id>testDeploy</id>
						<phase>deploy</phase>
						<goals>
							<goal>deploy-file</goal>
						</goals>
						<configuration>
							<repositoryId>artifactory</repositoryId>
							<url>${artifactoryUrl}</url>
							<file>target/${project.artifactId}-${project.version}.fsm</file>
							<pomFile>target/pom-install-deploy-fix/pom.xml</pomFile>
							<version>${project.version}</version>
							<generatePom>false</generatePom>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- install plugin used to install patched pom with eliminated variables -->
			<plugin>
				<artifactId>maven-install-plugin</artifactId>
				<version>2.3.1</version>
				<executions>
					<execution>
						<id>overwrite-pom</id>
						<phase>install</phase>
						<goals>
							<goal>install-file</goal>
						</goals>
						<configuration>
							<packaging>pom</packaging>
							<file>target/pom-install-deploy-fix/pom.xml</file>
							<pomFile>target/pom-install-deploy-fix/pom.xml</pomFile>
							<version>${project.version}</version>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- used to eliminate variables in pom, to use versioning in artifactory -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4.3</version>
				<executions>
					<execution>
						<id>replace-pom-placeholder</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${basedir}</directory>
									<includes>
										<include>pom.xml</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
							<outputDirectory>${project.build.directory}/pom-install-deploy-fix</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>



		</plugins>
		<defaultGoal>package</defaultGoal>
	</build>

	<!-- set dependencies -->
	<dependencies>

		<!-- testing -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.2</version>
			<scope>test</scope>
		</dependency>

		<!-- logging -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
			<scope>test</scope>
		</dependency>

		<!-- mocking -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>1.4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<version>1.4.12</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<profiles>
		<profile>
			<id>integration-test</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>2.9</version>
						<configuration>
							<skip>false</skip>
							<skipITs>false</skipITs>
							<skipTests>false</skipTests>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

</project>
